name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      #Setup insomnia inso version 8.6.1
      - name: Install Inso
        run: |
          wget -p https://github.com/Kong/insomnia/releases/download/lib%408.6.1/inso-linux-8.6.1.tar.xz -O inso.tar.xz
          tar -xvf inso.tar.xz
          chmod +x inso
          mv inso /usr/local/bin/inso
          rm inso.tar.xz


      - name: Yq Version
        run: yq --version

      # Runs a single command using the runners shell
      # - name: Configure executable
      #   run: chmod +x ./generate.sh

      # Runs a set of commands using the runners shell
      # - name: Run a script
      #   run: ./generate.sh

      - name: Run embeeded script
        run: |
          HOST_NAME="rest.apr.vee.codes"

          #Exporting from Openapi to Kong Ingress
          inso generate config openapi-swagger.yaml --type kubernetes --output kong.yaml
          PROJECT_NAME=$(yq e '(select(di == 0) | select(.kind == "Ingress") | .metadata.name)' kong.yaml | sed 's/-0//g')

          #Count the number of ingresses
          INGRESS_COUNT=$(yq e 'select(.kind == "Ingress") | length' kong.yaml | wc -l)

          #Iterate through the ingresses and create a service.yaml file
          for ((i=0; i<$INGRESS_COUNT; i++)); do
              NEW_PROJECT_NAME=${PROJECT_NAME}
              if [ $i -gt 0 ]; then
                  NEW_PROJECT_NAME=${PROJECT_NAME}${i}
                  echo "---" >> service.yaml
              fi
              PROJECT_PATH=$(yq e "(select(di == $i) | select(.kind == \"Ingress\") | .spec.rules[0].http.paths[0].path // \"\")" kong.yaml) || result=""
              yq e "(select(di == $i) | select(.kind == \"Ingress\") | .spec.rules[0].http.paths[0].path) |= \"/${NEW_PROJECT_NAME}${PROJECT_PATH}\"" -i kong.yaml
              SERVICE_NAME=$(yq e "(select(di == $i) | select(.kind == \"Ingress\") | .spec.rules[0].http.paths[0].backend.service.name)" kong.yaml)
              HOST_EXTERNAL=$(yq e "(select(di == $i) | select(.kind == \"Ingress\") | .spec.rules[0].host)" kong.yaml)
              kubectl create service externalname $SERVICE_NAME --external-name ${HOST_EXTERNAL} --dry-run=client -o=yaml | \
              yq -e 'del(.spec.selector) | del(.metadata.creationTimestamp) | del(.status) | del(.metadata.labels)' >> service.yaml
          done

          #Modify the kong.yaml file adapting to Kong Ingress
          yq e '(select(.kind == "Ingress") | .spec.ingressClassName) |= "kong"' -i kong.yaml
          yq e "(select(.kind == \"Ingress\") | .spec.rules[0].http.paths[0].pathType) |= \"Prefix\"" -i kong.yaml
          yq e "(select(.kind == \"Ingress\") | .spec.rules[0].host) |= \"${HOST_NAME}\"" -i kong.yaml

          #Merging files
          yq service.yaml kong.yaml > kong-kubernetes.yaml

          #Cleaning up
          rm service.yaml kong.yaml

      - name: Show content
        run: cat kong-kubernetes.yaml